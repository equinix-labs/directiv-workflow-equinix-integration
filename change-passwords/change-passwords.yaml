#
# This workflow prcoess the event generated from the master workflow. It will initiate
# the the passowrd changes by generating the appropriate event for each instance passed to
# the workflow
#
description: A workflow to rotate the passwords on the provisioned machine and store them in Vault

start:
  type: event
  state: generate-password
  event:
    type: com.equinix.password.update

functions:
  - id: ssh
    image: gcr.io/direktiv/functions/ssh:1.0
    type: knative-workflow
  - id: http-request
    image: gcr.io/direktiv/functions/http-request:1.0
    type: knative-workflow

states:
  #
  # Generate a new password which we intend to use in the password rotation policy
  #
  - id: generate-password
    type: action
    # log: jq(.)
    action:
      function: http-request
      secrets: ["VAULT_TOKEN", "VAULT_ADDRESS", "VAULT_STORE"]
      input:
        method: "POST"
        url: 'jq(.secrets.VAULT_ADDRESS)/v1/gen/password'
        headers:
          "X-Vault-Token": jq(.secrets.VAULT_TOKEN)
        content:
          value:
            length: 12
            symbols: 0
    transition: change-password
    transform: 'jq(. = ."com.equinix.password.update".data + { newpasswd: .return[0].result.data.value} )'
    catch:
    - error: "*"
      transition: exception-catch

  - id: change-password
    # log: jq(.)
    type: action
    action:
      function: ssh
      secrets: ["EQUINIX_ID_RSA"]
      input:
        files:
        - name: cert
          data: |
            jq(.secrets.EQUINIX_ID_RSA)
          mode: "0400"
        host:
          name: jq([.ip_addresses[] | select(.address_family==4)] | .[] | select(.public) | .address)
        auth:
          username: root
          certificate: cert
        commands:
        - command: usermod --password jq(.newpasswd) jq(.user)
    transition: update-vault
    catch:
    - error: "*"
      transition: exception-catch

  #
  # Next state create the user with the new password in the location in Vault specified in the "hashicaddress" variable returned
  # by the initial "getter" state (state 1)
  #
  #
  - id: update-vault
    type: action
    # log: jq(.)
    action:
      function: http-request
      secrets: ["VAULT_TOKEN", "VAULT_ADDRESS", "VAULT_STORE"]
      input:
        method: "POST"
        url: 'jq(.secrets.VAULT_ADDRESS)/v1/jq(.secrets.VAULT_STORE)/data/jq([.ip_addresses[] | select(.address_family==4)] | .[] | select(.public) | .address)'
        headers:
          "X-Vault-Token": jq(.secrets.VAULT_TOKEN)
          "Content-Type": "application/merge-patch+json"
        content:
          value:
            data:
              'jq(.user as $username | { ($username): .newpasswd })'
    catch:
    - error: "*"
      transition: exception-catch

  #
  # Handle any failed connections
  #
  - id: exception-catch
    log: 'Failed with the following: jq(.) - creating an incident'
    type: generateEvent
    event:
      type: com.direktiv.exception.create.incident
      source: provision-machines
      data: jq(.error)
